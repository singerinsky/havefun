// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* quest_action_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quest_action_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* quest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quest_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* quest_action_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  player_info_descriptor_ = file->message_type(0);
  static const int player_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_name_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  quest_action_data_descriptor_ = file->message_type(1);
  static const int quest_action_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_action_data, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_action_data, action_param_),
  };
  quest_action_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quest_action_data_descriptor_,
      quest_action_data::default_instance_,
      quest_action_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_action_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_action_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quest_action_data));
  quest_data_descriptor_ = file->message_type(2);
  static const int quest_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, quest_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, actions_),
  };
  quest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quest_data_descriptor_,
      quest_data::default_instance_,
      quest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quest_data));
  quest_action_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quest_action_data_descriptor_, &quest_action_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quest_data_descriptor_, &quest_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete quest_action_data::default_instance_;
  delete quest_action_data_reflection_;
  delete quest_data::default_instance_;
  delete quest_data_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\"5\n\013player_info\022\021\n\tplayer_id"
    "\030\001 \002(\005\022\023\n\013player_name\030\002 \002(\t\">\n\021quest_act"
    "ion_data\022\023\n\013action_type\030\001 \002(\005\022\024\n\014action_"
    "param\030\002 \003(\005\"~\n\nquest_data\022\017\n\007role_id\030\001 \002"
    "(\005\022\020\n\010quest_id\030\002 \002(\005\022\022\n\nquest_type\030\003 \002(\005"
    "\022\024\n\014quest_status\030\004 \002(\005\022#\n\007actions\030\005 \003(\0132"
    "\022.quest_action_data*H\n\021quest_action_type"
    "\022\030\n\024quest_action_killnpc\020\000\022\031\n\025quest_acti"
    "on_get_item\020\001", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  player_info::default_instance_ = new player_info();
  quest_action_data::default_instance_ = new quest_action_data();
  quest_data::default_instance_ = new quest_data();
  player_info::default_instance_->InitAsDefaultInstance();
  quest_action_data::default_instance_->InitAsDefaultInstance();
  quest_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;
const ::google::protobuf::EnumDescriptor* quest_action_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quest_action_type_descriptor_;
}
bool quest_action_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void player_info::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // required string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quest_action_data::kActionTypeFieldNumber;
const int quest_action_data::kActionParamFieldNumber;
#endif  // !_MSC_VER

quest_action_data::quest_action_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quest_action_data::InitAsDefaultInstance() {
}

quest_action_data::quest_action_data(const quest_action_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quest_action_data::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quest_action_data::~quest_action_data() {
  SharedDtor();
}

void quest_action_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quest_action_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quest_action_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quest_action_data_descriptor_;
}

const quest_action_data& quest_action_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

quest_action_data* quest_action_data::default_instance_ = NULL;

quest_action_data* quest_action_data::New() const {
  return new quest_action_data;
}

void quest_action_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_type_ = 0;
  }
  action_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quest_action_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        break;
      }

      // repeated int32 action_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_action_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quest_action_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action_type(), output);
  }

  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->action_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quest_action_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action_type(), target);
  }

  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->action_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quest_action_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_type());
    }

  }
  // repeated int32 action_param = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_param(i));
    }
    total_size += 1 * this->action_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quest_action_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quest_action_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quest_action_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quest_action_data::MergeFrom(const quest_action_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_param_.MergeFrom(from.action_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quest_action_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quest_action_data::CopyFrom(const quest_action_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quest_action_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void quest_action_data::Swap(quest_action_data* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    action_param_.Swap(&other->action_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quest_action_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quest_action_data_descriptor_;
  metadata.reflection = quest_action_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quest_data::kRoleIdFieldNumber;
const int quest_data::kQuestIdFieldNumber;
const int quest_data::kQuestTypeFieldNumber;
const int quest_data::kQuestStatusFieldNumber;
const int quest_data::kActionsFieldNumber;
#endif  // !_MSC_VER

quest_data::quest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quest_data::InitAsDefaultInstance() {
}

quest_data::quest_data(const quest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quest_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  quest_id_ = 0;
  quest_type_ = 0;
  quest_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quest_data::~quest_data() {
  SharedDtor();
}

void quest_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quest_data_descriptor_;
}

const quest_data& quest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();
  return *default_instance_;
}

quest_data* quest_data::default_instance_ = NULL;

quest_data* quest_data::New() const {
  return new quest_data;
}

void quest_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    quest_id_ = 0;
    quest_type_ = 0;
    quest_status_ = 0;
  }
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }

      // required int32 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quest_type;
        break;
      }

      // required int32 quest_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_type_)));
          set_has_quest_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quest_status;
        break;
      }

      // required int32 quest_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_status_)));
          set_has_quest_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_actions;
        break;
      }

      // repeated .quest_action_data actions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }

  // required int32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_id(), output);
  }

  // required int32 quest_type = 3;
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quest_type(), output);
  }

  // required int32 quest_status = 4;
  if (has_quest_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quest_status(), output);
  }

  // repeated .quest_action_data actions = 5;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }

  // required int32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_id(), target);
  }

  // required int32 quest_type = 3;
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quest_type(), target);
  }

  // required int32 quest_status = 4;
  if (has_quest_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quest_status(), target);
  }

  // repeated .quest_action_data actions = 5;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quest_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }

    // required int32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }

    // required int32 quest_type = 3;
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_type());
    }

    // required int32 quest_status = 4;
    if (has_quest_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_status());
    }

  }
  // repeated .quest_action_data actions = 5;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quest_data::MergeFrom(const quest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
    if (from.has_quest_status()) {
      set_quest_status(from.quest_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quest_data::CopyFrom(const quest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quest_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < actions_size(); i++) {
    if (!this->actions(i).IsInitialized()) return false;
  }
  return true;
}

void quest_data::Swap(quest_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(quest_status_, other->quest_status_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quest_data_descriptor_;
  metadata.reflection = quest_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
